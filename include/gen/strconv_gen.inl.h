//
// include/gen/strconv_gen.inl.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
#include "include/gen/command_gen.inl.h"
//#pragma endinclude
inline strconv::trace::trace() {
}

inline strconv::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline strconv::FieldId::FieldId(strconv_FieldIdEnum arg) { this->value = i32(arg); }
inline strconv::FieldId::FieldId() {
    strconv::FieldId_Init(*this);
}


// --- strconv.FieldId.value.GetEnum
// Get value of field as enum type
inline strconv_FieldIdEnum strconv::value_GetEnum(const strconv::FieldId& parent) {
    return strconv_FieldIdEnum(parent.value);
}

// --- strconv.FieldId.value.SetEnum
// Set value of field from enum type.
inline void strconv::value_SetEnum(strconv::FieldId& parent, strconv_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- strconv.FieldId.value.Cast
inline strconv::FieldId::operator strconv_FieldIdEnum () const {
    return strconv_FieldIdEnum((*this).value);
}

// --- strconv.FieldId..Init
// Set all fields to initial values.
inline void strconv::FieldId_Init(strconv::FieldId& parent) {
    parent.value = i32(-1);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const strconv::trace &row) {// cfmt:strconv.trace.String
    strconv::trace_Print(const_cast<strconv::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const strconv::FieldId &row) {// cfmt:strconv.FieldId.String
    strconv::FieldId_Print(const_cast<strconv::FieldId&>(row), str);
    return str;
}
