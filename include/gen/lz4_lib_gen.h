//
// include/gen/lz4_lib_gen.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
//#pragma endinclude

// --- lz4_lib_FieldIdEnum

enum lz4_lib_FieldIdEnum {        // lz4_lib.FieldId.value
     lz4_lib_FieldId_value   = 0
};

enum { lz4_lib_FieldIdEnum_N = 1 };

namespace lz4_lib { struct FieldId; }
namespace lz4_lib {
}//pkey typedefs
namespace lz4_lib {

// --- lz4_lib.FieldId
#pragma pack(push,1)
struct FieldId { // lz4_lib.FieldId: Field read helper
    i32   value;   //   -1
    inline operator lz4_lib_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(lz4_lib_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
lz4_lib_FieldIdEnum  value_GetEnum(const lz4_lib::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(lz4_lib::FieldId& parent, lz4_lib_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const lz4_lib::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const lz4_lib::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(lz4_lib::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(lz4_lib::FieldId& parent, algo::strptr rhs, lz4_lib_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(lz4_lib::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of lz4_lib::FieldId from an ascii string.
// The format of the string is the format of the lz4_lib::FieldId's only field
bool                 FieldId_ReadStrptrMaybe(lz4_lib::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 FieldId_Init(lz4_lib::FieldId& parent);
// print string representation of lz4_lib::FieldId to string LHS, no header -- cprint:lz4_lib.FieldId.String
void                 FieldId_Print(lz4_lib::FieldId & row, algo::cstring &str) __attribute__((nothrow));
} // end namespace lz4_lib
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const lz4_lib::FieldId &row);// cfmt:lz4_lib.FieldId.String
}
