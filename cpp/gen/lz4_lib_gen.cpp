//
// cpp/gen/lz4_lib_gen.cpp
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/lz4_lib_gen.h"
#include "include/gen/lz4_lib_gen.inl.h"
//#pragma endinclude
namespace lz4_lib {
static void          SizeCheck();
} // end namespace lz4_lib

// --- lz4_lib.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* lz4_lib::value_ToCstr(const lz4_lib::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case lz4_lib_FieldId_value         : ret = "value";  break;
    }
    return ret;
}

// --- lz4_lib.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void lz4_lib::value_Print(const lz4_lib::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- lz4_lib.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool lz4_lib::value_SetStrptrMaybe(lz4_lib::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,lz4_lib_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- lz4_lib.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void lz4_lib::value_SetStrptr(lz4_lib::FieldId& parent, algo::strptr rhs, lz4_lib_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- lz4_lib.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool lz4_lib::value_ReadStrptrMaybe(lz4_lib::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- lz4_lib.FieldId..ReadStrptrMaybe
// Read fields of lz4_lib::FieldId from an ascii string.
// The format of the string is the format of the lz4_lib::FieldId's only field
bool lz4_lib::FieldId_ReadStrptrMaybe(lz4_lib::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && lz4_lib::value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- lz4_lib.FieldId..Print
// print string representation of lz4_lib::FieldId to string LHS, no header -- cprint:lz4_lib.FieldId.String
void lz4_lib::FieldId_Print(lz4_lib::FieldId & row, algo::cstring &str) {
    lz4_lib::value_Print(row, str);
}

// --- lz4_lib...SizeCheck
inline static void lz4_lib::SizeCheck() {
}
